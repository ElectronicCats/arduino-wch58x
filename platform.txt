
# Arduino WCH Core and platform.
#
# For more info:
# https://github.com/arduino/Arduino/wiki/Arduino-IDE-1.5---3rd-party-Hardware-specification

name=WCH Boards
version=0.2.0

# Compile variables
# ------------------------

compiler.warning_flags=-w
compiler.warning_flags.none=-w
compiler.warning_flags.default=
compiler.warning_flags.more=-Wall
compiler.warning_flags.all=-Wall -Wextra

compiler.path={runtime.tools.riscv-none-embed-gcc.path}/bin/
compiler.c.cmd={build.crossprefix}gcc
compiler.c.flags=-c {compiler.warning_flags} "@{compiler.wch.cflags}" {compiler.wch.arch.define} -march={build.mcu} -mabi=ilp32
compiler.c.elf.cmd={build.crossprefix}g++
compiler.c.elf.flags=-Wl,--gc-sections {compiler.warning_flags} -Wl,--as-needed
compiler.S.cmd={build.crossprefix}g++
compiler.S.flags=-c -x assembler-with-cpp -march={build.mcu} -mabi=ilp32
compiler.cpp.cmd={build.crossprefix}g++
compiler.cpp.flags=-c {compiler.warning_flags} -g3 -nostdlib {compiler.wch.arch.define} -march={build.mcu} -mabi=ilp32
compiler.ar.cmd={build.crossprefix}ar
compiler.ar.flags=rcs
compiler.objcopy.cmd=
compiler.objcopy.eep.flags=
compiler.elf2hex.bin.flags=-O binary
compiler.elf2hex.hex.flags=-O ihex -R .eeprom
compiler.elf2hex.cmd={build.crossprefix}objcopy
compiler.ldflags=
compiler.libraries.ldflags=
compiler.size.cmd={build.crossprefix}size
compiler.define=-DARDUINO=

# this can be overriden in boards.txt
build.extra_flags=
build.extra_ldflags=
compiler.wch=

# These can be overridden in platform.local.txt
compiler.c.extra_flags=  "-I{runtime.tools.CH85x-HAL.path}/" "-I{runtime.tools.CH85x-HAL.path}/EVT/EXAM/SRC/" "-I{runtime.tools.CH85x-HAL.path}/EVT/EXAM/SRC/StdPeriphDriver/" "-I{runtime.tools.CH85x-HAL.path}/EVT/EXAM/SRC/StdPeriphDriver/inc/" "-I{runtime.tools.CH85x-HAL.path}/EVT/EXAM/SRC/LIB/" "-I{runtime.tools.CH85x-HAL.path}/EVT/EXAM/SRC/RVMSIS/" "-I{runtime.tools.CH85x-HAL.path}/EVT/EXAM/SRC/HAL/" "-I{runtime.tools.CH85x-HAL.path}/EVT/EXAM/SRC/HAL/include/"
compiler.cpp.extra_flags="-I{runtime.tools.CH85x-HAL.path}/" "-I{runtime.tools.CH85x-HAL.path}/EVT/EXAM/SRC/" "-I{runtime.tools.CH85x-HAL.path}/EVT/EXAM/SRC/StdPeriphDriver/" "-I{runtime.tools.CH85x-HAL.path}/EVT/EXAM/SRC/StdPeriphDriver/inc/" "-I{runtime.tools.CH85x-HAL.path}/EVT/EXAM/SRC/LIB/" "-I{runtime.tools.CH85x-HAL.path}/EVT/EXAM/SRC/RVMSIS/" "-I{runtime.tools.CH85x-HAL.path}/EVT/EXAM/SRC/HAL/" "-I{runtime.tools.CH85x-HAL.path}/EVT/EXAM/SRC/HAL/include/"
compiler.c.elf.extra_flags=
compiler.S.extra_flags=

compiler.ar.extra_flags=
compiler.objcopy.eep.extra_flags=
compiler.elf2hex.extra_flags=

# {build.library_discovery_phase} is set to 1 by the builder during library discovery.
# (this is available since arduino-builder>=1.5.5, keeping the default here for backward compatiblity)
build.library_discovery_phase=0
build.library_discovery_phase_flag=-DARDUINO_LIBRARY_DISCOVERY_PHASE={build.library_discovery_phase}

# USB Flags
# ---------
build.usb_flags=

# Default usb manufacturer will be replaced at compile time using
# numeric vendor ID if available or by board's specific value.
#build.usb_manufacturer="Unknown"

build.zip.pattern={recipe.size.pattern}

# Linux compile patterns
# -----------------------


## Compile c files
recipe.c.o.pattern="{compiler.path}{compiler.c.cmd}" {compiler.c.flags} -DARDUINO={runtime.ide.version} -DARDUINO_{build.board} -DARDUINO_ARCH_{build.arch} -DARDUINO_ARCH_WCH {build.library_discovery_phase_flag} {build.extra_flags} {build.extra_ldflags} {compiler.c.extra_flags} "-I{build.core.path}/api/deprecated" "-I{build.core.path}/api/deprecated-avr-comp" {includes} "-iprefix{build.core.path}" "@{compiler.wch.includes}" -o "{object_file}" "{source_file}"

## Compile c++ files
recipe.cpp.o.pattern="{compiler.path}{compiler.cpp.cmd}" {compiler.cpp.flags} -DARDUINO={runtime.ide.version} -DARDUINO_{build.board} -DARDUINO_ARCH_{build.arch} -DARDUINO_ARCH_WCH {build.library_discovery_phase_flag} {includes} {build.extra_flags} {build.extra_ldflags} {compiler.cpp.extra_flags} "-I{build.core.path}/api/deprecated" "-I{build.core.path}/api/deprecated-avr-comp" "-iprefix{build.core.path}" "@{compiler.wch.includes}" "{source_file}" -o "{object_file}"

## Compile asm files
recipe.S.o.pattern="{compiler.path}{compiler.S.cmd}" {compiler.S.flags} -DARDUINO={runtime.ide.version} -DARDUINO_{build.board} -DARDUINO_ARCH_{build.arch} -DARDUINO_ARCH_WCH {includes} {build.extra_flags} {build.extra_ldflags} {compiler.cpp.extra_flags} "-I{build.core.path}/api/deprecated" "-I{build.core.path}/api/deprecated-avr-comp" "-iprefix{build.core.path}" "@{compiler.wch.includes}" "{source_file}" -o "{object_file}"

## Create archives
recipe.ar.pattern="{compiler.path}{compiler.ar.cmd}" {compiler.ar.flags} {compiler.ar.extra_flags} "{archive_file_path}" "{object_file}"

## Preprocess linker script
recipe.hooks.linking.prelink.1.pattern="{compiler.path}{compiler.c.elf.cmd}" -E -P -x c {build.extra_ldflags} "{build.variant.path}/{build.ldscript}" -o "{build.path}/{build.ldscript}"

## Combine gc-sections, archives, and objects
recipe.c.combine.pattern="{compiler.path}{compiler.c.elf.cmd}"  "-L{build.path}" {compiler.c.elf.flags} {compiler.c.elf.extra_flags} {build.extra_flags} {build.extra_ldflags} "@{compiler.wch.ldflags}" "-T{build.path}/{build.ldscript}" "-Wl,-Map,{build.path}/{build.project_name}.map" --specs=nosys.specs {compiler.ldflags} -o "{build.path}/{build.project_name}.elf" {object_files} -Wl,--whole-archive "{build.path}/{archive_file}" {compiler.wch} -Wl,--no-whole-archive -Wl,--start-group {compiler.wch.extra_ldflags} {compiler.libraries.ldflags} -Wl,--end-group

## Create eeprom
recipe.objcopy.eep.pattern=

## Create output (bin file)
recipe.objcopy.bin.pattern="{compiler.path}{compiler.elf2hex.cmd}" {compiler.elf2hex.bin.flags} {compiler.elf2hex.extra_flags} "{build.path}/{build.project_name}.elf" "{build.path}/{build.project_name}.bin"

## Create output (hex file)
recipe.objcopy.hex.pattern="{compiler.path}{compiler.elf2hex.cmd}" {compiler.elf2hex.hex.flags} {compiler.elf2hex.extra_flags} "{build.path}/{build.project_name}.elf" "{build.path}/{build.project_name}.hex"

## Compute size
recipe.size.pattern="{compiler.path}{compiler.size.cmd}" -A "{build.path}/{build.project_name}.elf"
recipe.size.regex.data=^(?:\.data|\.bss)\s+([0-9]+).*
recipe.size.regex=^(?:\.data|\.text|\.rodata)\S*?\s+([0-9]+).*

## Save hex
recipe.output.tmp_file={build.project_name}.bin
recipe.output.save_file={build.project_name}.{build.variant}.bin


# Uploader tools
# --------------

#
# OpenOCD
#
tools.openocd.path={runtime.tools.openocd.path}
tools.openocd.cmd=bin/openocd
tools.openocd.cmd.windows=bin/openocd.exe

tools.openocd.upload.params.verbose=-d2
tools.openocd.upload.params.quiet=-d0
tools.openocd.upload.pattern="{path}/{cmd}" {upload.verbose} -s "{path}/share/openocd/scripts/" {bootloader.programmer} {upload.transport} {bootloader.config} -c "telnet_port disabled; init; reset init; halt; adapter speed 10000; program {{build.path}/{build.project_name}.elf}; reset run; shutdown"

tools.openocd.program.params.verbose=-d2
tools.openocd.program.params.quiet=-d0
tools.openocd.program.pattern="{path}/{cmd}" {program.verbose} -s "{path}/share/openocd/scripts/" {bootloader.programmer} {upload.transport} {bootloader.config} -c "telnet_port disabled; init; reset init; halt; adapter speed 10000; program {{build.path}/{build.project_name}.elf}; reset run; shutdown"

tools.openocd.erase.params.verbose=-d2
tools.openocd.erase.params.quiet=-d0
tools.openocd.erase.pattern=

tools.openocd.bootloader.params.verbose=-d2
tools.openocd.bootloader.params.quiet=-d0
tools.openocd.bootloader.pattern="{path}/{cmd}" {bootloader.verbose} -s "{path}/share/openocd/scripts/" {bootloader.programmer} {upload.transport} {bootloader.config} -c "telnet_port disabled; init; reset init; halt; adapter speed 10000; {bootloader.extra_action.preflash}; program {{runtime.platform.path}/bootloaders/{bootloader.file}}; reset run; shutdown"

# ch55xtool
# -------------------------------------

tools.ch55xtool_usb.cmd=ch55xtool.py
# these lines are for manual install. For board manager installs they get converted to use
# {runtime.tools.MCS51Tools.path} instead of {runtime.hardware.path}/tools
#tools.ch55xtool_usb.path={runtime.tools.MCS51Tools.path}/linux
tools.ch55xtool_usb.path=/home/sabas/Arduino/tools/ch55xtool
tools.ch55xtool_usb.path.windows={runtime.tools.MCS51Tools.path}/win
tools.ch55xtool_usb.path.macosx={runtime.tools.MCS51Tools.path}/macosx

tools.ch55xtool_usb.upload.params.verbose=
tools.ch55xtool_usb.upload.params.quiet=
tools.ch55xtool_usb.upload.pattern="{path}/{cmd}" -f "{build.path}/{build.project_name}.bin"